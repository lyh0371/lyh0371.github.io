(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{141:function(a,t,s){"use strict";s.r(t);var r=s(0),v=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"v8-是如何执行javascript的？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v8-是如何执行javascript的？"}},[a._v("#")]),a._v(" V8 是如何执行JavaScript的？")]),a._v(" "),s("p",[a._v("之所以会问这个问题，是因为在学习javascript的时候我们可能会有很多疑惑,特别是对javascript进行优化的时候,有时候毫无头绪,那我们就\n从基础入手,看看V8是怎么执行javascript的吧")]),a._v(" "),s("h2",{attrs:{id:"javascript是什么类型的语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript是什么类型的语言"}},[a._v("#")]),a._v(" javascript是什么类型的语言")]),a._v(" "),s("p",[a._v("我们知道javascript是弱类型,动态脚本语言,主要特点")]),a._v(" "),s("ul",[s("li",[a._v("变量之前并不需要确认其数据类型运行过程中需要检查数据类型")]),a._v(" "),s("li",[a._v("支持隐式类型转换")]),a._v(" "),s("li",[a._v("弱类型，意味着你不需要告诉 JavaScript 引擎这个或那个变量是什么数据类型，JavaScript 引擎在运行代码的时候自己会计算出来")]),a._v(" "),s("li",[a._v("动态，意味着你可以使用同一个变量保存不同类型的数据")])]),a._v(" "),s("p",[a._v("要深入理解 V8 的工作原理，我们需要搞清楚一些概念和原理")]),a._v(" "),s("ul",[s("li",[a._v("编译器（Compiler）、解释器（Interpreter）")]),a._v(" "),s("li",[a._v("抽象语法树（AST）")]),a._v(" "),s("li",[a._v("字节码（Bytecode）")]),a._v(" "),s("li",[a._v("即时编译器（JIT）")])]),a._v(" "),s("h2",{attrs:{id:"编译器和解释器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译器和解释器"}},[a._v("#")]),a._v(" 编译器和解释器")]),a._v(" "),s("p",[a._v("编译型语言在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译了。比如 "),s("strong",[a._v("C/C++、GO")]),a._v("  等都是编译型语言。")]),a._v(" "),s("p",[a._v("而由解释型语言编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行。比如 "),s("strong",[a._v("Python、JavaScript")]),a._v(" 等都属于解释型语言")]),a._v(" "),s("h3",{attrs:{id:"编译性语言代码解析过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译性语言代码解析过程"}},[a._v("#")]),a._v(" 编译性语言代码解析过程")]),a._v(" "),s("p",[a._v("编译器首先会依次对源代码进行"),s("code",[a._v("词法分析、语法分析，生成抽象语法树（AST）")]),a._v("，然后是优化代码，最后再生成处理器能够理解的机器码。如果编译成功，将会生成一个可执行的文件。但如果编译过程发生了语法或者其他的错误，那么编译器就会抛出异常，最后的二进制文件也不会生成成功\n具体流程为:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("词法分析"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 语法分析"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("生成抽象语法树")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("AST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("优化代码"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("生成机器码 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("执行机器码\n")])])]),s("h3",{attrs:{id:"解释性语言代码解析过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释性语言代码解析过程"}},[a._v("#")]),a._v(" 解释性语言代码解析过程")]),a._v(" "),s("p",[a._v("在解释型语言的解释过程中，同样解释器也会对源代码进行词法分析、语法分析，并生成抽象语法树（AST），不过它会再基于抽象语法树生成字节码，最后再根据字节码来执行程序、输出结果\n具体流程为:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("词法分析"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 语法分析"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("生成抽象语法树")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("AST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("字节码"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("生成机器码"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("执行机器码\n")])])]),s("h2",{attrs:{id:"v8-执行javascript流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v8-执行javascript流程"}},[a._v("#")]),a._v(" V8 执行javascript流程")]),a._v(" "),s("h3",{attrs:{id:"生成抽象语法树（ast）和执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成抽象语法树（ast）和执行上下文"}},[a._v("#")]),a._v(" 生成抽象语法树（AST）和执行上下文")]),a._v(" "),s("p",[a._v("将源代码转换为抽象语法树，并生成执行上下文 "),s("br"),a._v("\nAST 是非常重要的一种数据结构，在很多项目中有着广泛的应用。其中最著名的一个项目是 Babel。Babel 是一个被广泛使用的代码转码器，可以将 ES6 代码转为 ES5 代码，这意味着你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持 ES6。Babel 的工作原理就是先将 ES6 源码转换为 AST，然后再将 ES6 语法的 AST 转换为 ES5 语法的 AST，最后利用 ES5 的 AST 生成 JavaScript 源代码。")]),a._v(" "),s("p",[a._v("除了 Babel 外，还有 ESLint 也使用 AST。ESLint 是一个用来检查 JavaScript 编写规范的插件，其检测流程也是需要将源码转换为 AST，然后再利用 AST 来检查代码规范化的问题。")]),a._v(" "),s("p",[a._v("现在你知道了什么是 AST 以及它的一些应用，那接下来我们再来看下 AST 是如何生成的。通常，生成 AST 需要经过两个阶段")]),a._v(" "),s("ul",[s("li",[a._v("第一阶段是分词（tokenize），又称为 "),s("strong",[a._v("词法分析")]),a._v("，其作用是将一行行的源码拆解成一个个 token")]),a._v(" "),s("li",[a._v("第二阶段是解析（parse），又称为 "),s("strong",[a._v("语法分析")]),a._v("，其作用是将上一步生成的 token 数据，根据语法规则转为 AST。如果源码符合语法规则，这一步就会顺利完成。但如果源码存在语法错误，这一步就会终止，并抛出一个“语法错误”\n这就是 AST 的生成过程，先分词，再解析")])]),a._v(" "),s("h3",{attrs:{id:"生成字节码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成字节码"}},[a._v("#")]),a._v(" 生成字节码")]),a._v(" "),s("p",[a._v("有了 AST 和执行上下文后，那接下来的第二步，解释器 Ignition 就登场了，它会根据 AST 生成字节码，并解释执行字节码。")]),a._v(" "),s("p",[a._v("其实一开始 V8 并没有字节码，而是直接将 AST 转换为机器码，由于执行机器码的效率是非常高效的，所以这种方式在发布后的一段时间内运行效果是非常好的。但是随着 Chrome 在手机上的广泛普及，特别是运行在 512M 内存的手机上，内存占用问题也暴露出来了，因为 V8 需要消耗大量的内存来存放转换后的机器码。为了解决内存占用问题，V8 团队大幅重构了引擎架构，引入字节码，并且抛弃了之前的编译器，最终花了将进四年的时间，实现了现在的这套架构。"),s("br")]),a._v(" "),s("p",[a._v("那什么是字节码呢？为什么引入字节码就能解决内存占用问题呢？"),s("br")]),a._v(" "),s("p",[s("strong",[a._v("字节码就是介于 AST 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。")])]),a._v(" "),s("h3",{attrs:{id:"执行代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行代码"}},[a._v("#")]),a._v(" 执行代码")]),a._v(" "),s("p",[a._v("生成字节码之后，接下来就要进入执行阶段了。")]),a._v(" "),s("p",[a._v("通常，如果有一段第一次执行的字节码，解释器 Ignition 会逐条解释执行。在执行字节码的过程中，如果发现有热点代码（HotSpot），比如一段代码被重复执行多次，这种就称为热点代码，那么后台的编译器 TurboFan 就会把该段热点的字节码编译为高效的机器码，然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，这样就大大提升了代码的执行效率。\n具体执行过程如图:\n"),s("br")]),a._v(" "),s("p",[s("img",{attrs:{src:"/imgs/v8.png",alt:"v8"}})]),a._v(" "),s("h2",{attrs:{id:"javascript-的性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-的性能优化"}},[a._v("#")]),a._v(" JavaScript 的性能优化")]),a._v(" "),s("p",[a._v("到这里相信你现在已经了解 V8 是如何执行一段 JavaScript 代码的了。在过去几年中，JavaScript 的性能得到了大幅提升，这得益于 V8 团队对解释器和编译器的不断改进和优化。")]),a._v(" "),s("p",[a._v("虽然在 V8 诞生之初，也出现过一系列针对 V8 而专门优化 JavaScript 性能的方案，比如隐藏类、内联缓存等概念都是那时候提出来的。不过随着 V8 的架构调整，你越来越不需要这些微优化策略了，相反，对于优化 JavaScript 执行效率，你应该将优化的中心聚焦在单次脚本的执行时间和脚本的网络下载上，主要关注以下三点内容：")]),a._v(" "),s("ul",[s("li",[a._v("提升单次脚本的执行速度，避免 JavaScript 的长任务霸占主线程，这样可以使得页面快速响应交互；")]),a._v(" "),s("li",[a._v("避免大的内联脚本，因为在解析 HTML 的过程中，解析和编译也会占用主线程；")]),a._v(" "),s("li",[a._v("减少 JavaScript 文件的容量，因为更小的文件会提升下载速度，并且占用更低的内存")])]),a._v(" "),s("h2",{attrs:{id:"关于即时编译-jit-技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于即时编译-jit-技术"}},[a._v("#")]),a._v(" 关于即时编译(JIT) 技术")]),a._v(" "),s("p",[a._v("其实字节码配合解释器和编译器是最近一段时间很火的技术，比如 Java 和 Python 的虚拟机也都是基于这种技术实现的，我们把这种技术称为即时编译（JIT）。具体到 V8，就是指解释器 Ignition 在解释执行字节码的同时，收集代码信息，当它发现某一部分代码变热了之后，TurboFan 编译器便闪亮登场，把热点的字节码转换为机器码，并把转换后的机器码保存起来，以备下次使用。")]),a._v(" "),s("p",[a._v("对于 JavaScript 工作引擎，除了 V8 使用了“字节码 +JIT”技术之外，苹果的 SquirrelFish Extreme 和 Mozilla 的 SpiderMonkey 也都使用了该技术")])])}),[],!1,null,null,null);t.default=v.exports}}]);